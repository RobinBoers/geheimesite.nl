#!/bin/bash -eu

SRC=src
DIST=dist
TEMPLATES=templates
REMOTE=s11
DOMAIN=roblog.nl

FORMAT="prettier --ignore-path .prettierignore"
COPY="rsync -au --delete "$SRC/" "$DIST/" --exclude images"
DEPLOY="rsync -ciavuP --delete --exclude canvas.json"

setup() {
  bun i
}

deploy() {
  if [ -d $DIST ]; then
    $DEPLOY $DIST/ $REMOTE:domains/$DOMAIN/public_html
  else
    echo >&2 "Error: '$DIST' does not exist."
    echo >&2
  fi
}

format() {
  $FORMAT --write $SRC
}

dev() {
  cd $SRC
  waiter --dev
}

serve() {
  cd $DIST
  waiter --dev
}

clean() {
  rm -rf $DIST
  rm -rf node_modules bun.lockb
}

build() {
  p:process_files
  p:generate_sitemap
  p:generate_feeds
  p:build_assets
}

p:process_files() {
  local changed_files="$($COPY -i | grep -v '/$' | grep -v ".xml$" | cut -d' ' -f2)"

  if [ -n "$changed_files" ]; then
    printf "Updating these files: \n"
    echo "$changed_files"
    echo
  else
    echo "Nothing to do. "
  fi

  while IFS= read -r file; do
    if [[ "$file" == *.html ]]; then
      cat "$SRC/$file" | lowc | shortc | smartypants | sed '/<\/title>/i\\n<link rel="stylesheet" href="/main.css" />' > "$DIST/$file"

      local lastmod="$(git log --pretty=format:%cI -1 HEAD -- "$SRC/$file")"
      $FORMAT --write "$DIST/$file" >/dev/null

      # The `+1 second` is because rsync will overwrite files
      # if they have the exact same last mod date, while I want it
      # to only overwrite if the source is newer.
      touch -d "$lastmod + 1 second" "$DIST/$file"
      printf .
    fi
  done <<< "$changed_files"

  echo "done"
}

p:build_assets() {
  find "$SRC/images" -type f \( -iname "*.jpg" -o -iname "*.png" -o -iname "*.jpeg" \) -printf "%P\n" | xargs -I {} sh -c "[ -e '$DIST/images/{}' ] || optim '$SRC/images/{}' '$DIST/images/{}'"
  rsync -au --delete "$SRC/images/buttons" "$DIST/images/"
}

p:generate_sitemap() {
  local sitemap="$DIST/sitemap.xml"
  genmap "$DIST" "$DOMAIN" > $sitemap

  # My canonical URLs are without the .html suffix
  sed -i 's/\.html//g' $sitemap
}

p:generate_feeds() {
  export TITLE="Robin (axcelott)"
  export BIO="Thoughts and opinions of a teenager from the Netherlands."
  export CANONICAL="$DOMAIN"
  export LANGUAGE="en"
  export AUTHOR="Robin Boers"
  export EMAIL="webmaster@roblog.nl"
  export RIGHTS="Copying is an act of love. Please copy."

  SELF="/index.xml" genfeed -trss "$DIST/blog" > "$DIST/index.xml"
  SELF="/atom.xml" genfeed -tatom "$DIST/blog" > "$DIST/atom.xml"
}

new() {
  p:get "Title" TITLE
  p:get_with_default "Language" LANGUAGE "en"
  p:get_with_default "Path" URL "$(sluggify "$TITLE")" 

  export PARENT="/"
  export CONTENT="<!-- CONTENT HERE -->"

  p:write "page.html"
}

publish() {
  local draft="$1"

  if [ -e "$draft" ]; then
    p:get "Title" TITLE
    p:get_with_default "Date" DATE "$(date +"%Y-%m-%d")"
    p:get_with_default "Language" LANGUAGE "en"

    export PARENT="/blog"
    export URL="blog/$(basename "${1%.*}")"
    export CONTENT="$(cat "$draft")"

    export DATE_SHORT="$(date -d "$DATE" +"%Y-%m-%d")"
    export DATE_LONG="$(date -d "$DATE" +"%b %d, %Y")"

    p:list
    p:write "post.html"
  else
    err "'$draft' doesn't exist."
  fi
}

# Writes a page to the $SRC directory.
p:write() {
  local dist="$SRC/$URL.html"

  [ -f "$dist" ] && err "'$dist' already exists."

  mkdir -p "$(dirname "$dist")"

  # Render sub-template
  export CONTENT="$(p:render "$1")"
  # Render into base template
  p:render "base.html" > "$dist"

  $FORMAT --write "$dist" >/dev/null
}

# Appends a post to the posts listings.
p:list() {
  local C="$(p:render "h-entry.html" | p:sed_escape)"
  sed -i /'<!-- INSERT NEW POSTS HERE -->'/a\\"$C" "$SRC/blog/index.html"
}

# Renders a template in the $TEMPLATES directory.
p:render() {
  export CANONICAL="$DOMAIN"
  cat "$TEMPLATES/$1" | envsubst
}

p:get() {
  # Return if $2 is already set.
  [ -v $2 ] && return

  printf "\n$1: "
  read $2
  export $2

  if [ -z "${!2}" ]; then
    err "you didn't provide $1."
  fi
}

p:get_with_default() {
  [ -v $2 ] && return

  printf "\n$1 [$3]: "
  read $2
  export $2

  if [ "${!2}" = "" ]; then
    eval "export $2='$3'"
  fi
}

p:sed_escape() {
  sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//;s/\//\\\//g' | tr '\n' ' ' 
}
