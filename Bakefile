#!/bin/bash -eu

SRC_DIR="src"
DIST_DIR="dist"
DOMAIN="roblog.nl"

build() {
  rsync -av --update "$SRC_DIR/" "$DIST_DIR/"
  p:generate_sitemap
  p:optimize_images
}

deploy() {
  if [ -d "$DIST_DIR" ]; then
    rsync -ciavuP --delete "$DIST_DIR/" geheimesite.nl:domains/$DOMAIN/public_html
  else
    echo >&2 "Error: '$DIST_DIR' does not exist."
    echo >&2
  fi
}

format() {
  prettier --write "$SRC_DIR" 
}

serve() {
  cd "$SRC_DIR"
  waiter --dev
}

clean() {
  rm -rf "$DIST_DIR"
  rm -rf node_modules package-lock.json
}

p:optimize_images() {
  SCALE_DOWN="convert {} -resize 600x> {}"
  OPTIMIZE_PNG="optipng -strip all -clobber -preserve {} -out {}"
  OPTIMIZE_JPG="jpegoptim --strip-all --all-progressive --preserve {}"
  
  find "$DIST_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) -exec $SCALE_DOWN \;
  find "$DIST_DIR" -type f -iname "*.png" -exec $OPTIMIZE_PNG \; 
  find "$DIST_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" \) -exec $OPTIMIZE_JPG \;
}

p:generate_sitemap() {
  local sitemap="$DIST_DIR/sitemap.xml"
  local robots="$DIST_DIR/robots.txt"

  echo '<?xml version="1.0" encoding="UTF-8"?>' > "$sitemap"
  echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' >> "$sitemap"

  find "$DIST_DIR" -type f -name "*.html" | while read -r path; do
      local path=$(realpath --relative-to="$DIST_DIR" "$path" | p:url_encode)
      echo "<url><loc>https://$DOMAIN/${path%index}</loc></url>" >> "$sitemap"
  done

  echo '</urlset>' >> "$sitemap"
  echo "Sitemap: https://$DOMAIN/robots.txt" >> "$robots"
}

p:url_encode() {
  read -r string
  echo "${string%.html}" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'\''/\&apos;/g'
}

new() {
  p:get "Title" TITLE
  p:get_with_default "Language" LANGUAGE "en"
  p:get_with_default "Path" URL "$(p:sluggify "$TITLE")" 

  export PARENT="/"
  export CONTENT="<!-- CONTENT HERE -->"
  p:render
}

publish() {
  if [ -e "$1" ]; then
    p:get "Title" TITLE
    p:get_with_default "Date" DATE "$(date +"%Y-%m-%d")"
    p:get_with_default "Language" LANGUAGE "en"

    export PARENT="/blog"
    export URL="blog/$(basename "$1" ".html")"
    export CONTENT="$(cat "$1")"

    p:append_to_index
    p:append_to_rss

    export CONTENT="$(p:append_post_footer "$CONTENT")" 
    p:render 
  else
    echo >&2 "Error: file '$1' doesn't exist."
    echo >&2
    exit 1
  fi
}

p:get() {
  [ -v $2 ] && return

  printf "\n$1: "
  read $2
  export $2

  if [ "${!2}" = "" ]; then
    echo >&2 "Error: you didn't provide $1."
    echo >&2
    exit 1 
  fi
}

p:get_with_default() {
  [ -v $2 ] && return

  printf "\n$1 [$3]: "
  read $2

  if [ "${!2}" = "" ]; then
    eval "export $2='$3'"
  fi
}

p:sluggify() { 
  echo "$1" | tr '[:upper:]' '[:lower:]' | tr -cs '[:alnum:]' '-' | sed 's/-$//'
}

p:render() { 
  path="$SRC_DIR/$URL.html"

  if [ -e "$path" ]; then
    echo >&2 "Error: file '$path' already exists."
    echo >&2 
    exit 1
  fi

  mkdir -p "$(dirname "$path")"
  cat TEMPLATE.html | envsubst > "$path" 
  e "$path"
}

p:append_post_footer() {
  CONTENT=$(cat <<EOF
    $1

    <footer>
      <p>
	Posted on
	<a href="https://$DOMAIN/$URL">
	  <time datetime="$(date -d "$DATE" +"%Y-%m-%d")">
	    $(date -d "$DATE" +"%b %d, %Y")
	  </time>
	</a>
      </p>

      <p class="reply-by-email">
        <a href="mailto:axcelott@roblog.nl">
	  Reply by email
	</a>
      </p>
    </footer>
EOF
)

echo "$CONTENT"
}

p:append_to_index() {
  H_ENTRY="$(cat <<EOF
<tr class="h-entry">
  <td class="p-title">
    <a class="u-url" href="/$URL">
      $TITLE
    </a>
  </td>
  <td>
    <time class="dt-published" datetime="$(date -d "$DATE" +"%Y-%m-%d")">
      $(date -d "$DATE" +"%b %d, %Y")
    </time>
  </td>
</tr>
EOF
)"

local C=$(p:escape_xml "$H_ENTRY")
sed -i /'<!-- INSERT NEW POSTS HERE -->'/a\\"$C" "$SRC_DIR/blog/index.html"
}

p:append_to_rss() {
  RSS_ENTRY="$(cat <<EOF
<item>
  <title>$TITLE</title>
  <link>https://$DOMAIN/$URL</link>
  <pubDate>$(date -d "$DATE" +"%d %b %Y") 12:00:00 +0100</pubDate>
  <guid>https://$DOMAIN/$URL</guid>
  <content:encoded>
    <![CDATA[
    $CONTENT
    ]]>
  </content:encoded>
</item>
EOF
)"

local C=$(p:escape_xml "$RSS_ENTRY")
sed -i /'<!-- INSERT NEW POSTS HERE -->'/a\\"$C" "$SRC_DIR/index.xml"
}

p:escape_xml() {
  echo "$1" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//;s/\//\\\//g' | tr '\n' ' ' 
}
