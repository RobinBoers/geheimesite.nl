#!/bin/bash 

required bakery
required tomlq
required gum

SRC=src
DIST=dist
TEMPLATES=templates
REMOTE=s11
DOMAIN=roblog.nl

FORMAT="prettier --ignore-path .prettierignore"
VALIDATE="vnu --exit-zero-always --filterfile .vnuignore"
DEPLOY="rsync -ciavuP --delete --exclude canvas.json"

# Bakery configuration
export TITLE="Robin (axcelott)"
export BIO="Thoughts and opinions of a teenager from the Netherlands."
export CANONICAL="$DOMAIN"
export HEADER="$(cat $TEMPLATES/head.html)"
export LANGUAGE="en"
export AUTHOR="Robin Boers"
export EMAIL="webmaster@roblog.nl"
export RIGHTS="Copying is an act of love. Please copy."
export STYLESHEET="/main.css?v=$(md5sum $SRC/main.css | awk '{print $1}')"
export FORMATTER="$FORMAT --write"

setup() {
  bun i
}

deploy() {
  if [ -d $DIST ]; then
    $DEPLOY $DIST/ $REMOTE:domains/$DOMAIN/public_html
  else
    echo >&2 "Error: '$DIST' does not exist."
    echo >&2
  fi
}

format() {
  $FORMAT --write $SRC
}

build() {
  bakery build $SRC $DIST

  # My canonical URLs are without the .html suffix.
  sed -i 's/\.html//g' "$DIST/sitemap.xml"
}

webmentions() {
  local file="${1:-"$DIST/atom.xml"}"
  local limit="--limit ${2:-1}"

  if wm "$file" $limit && prompt -y "Send mentions for these URLs?"; then
    wm "$file" $limit --send
  fi
}

serve() {
  cd $DIST
  waiter --dev
}

dev() {
  bakery watch $SRC $DIST &
  trap "kill $!" SIGINT
  mkdir -p $DIST && cd $DIST
  waiter --dev
}

clean() {
  rm -rf $DIST
  rm -rf node_modules bun.lockb results
}

check() {
  echo
  echo "Running formatter"
  $FORMAT --check $DIST

  echo
  echo "Running validators"
  $VALIDATE --skip-non-html --also-check-css $DIST && echo "No issues."
  
  echo
  echo "Running stylelint"
  stylelint "$DIST/**/*.css" && echo "No issues."

  echo
  echo "Running achecker"
  achecker $DIST

  # BLOCKED: htmltest doesn't yet support pretty URLs like I have,
  # see https://github.com/wjdp/htmltest/issues/183

  # echo
  # echo "Running htmltest"
  # htmltest
}

new() {
  p:get "Title" TITLE
  p:get "Type [page|post]" TYPE

  case $TYPE in
    page) export PARENT="/" ;;
    post) export PARENT="/blog" ;;
    *) err "invalid page type." ;;
  esac

  p:get_with_default "Path" URL "${PARENT/%\//}/$(sluggify "$TITLE")" 
  p:get_with_default "Language" LANGUAGE "en"

  export CONTENT="<!-- CONTENT HERE -->"

  if [ $type == "post" ]; then
    p:get_with_default "Date" DATE "$(date +"%Y-%m-%d")"
    export DATE_SHORT="$(date -d "$DATE" +"%Y-%m-%d")"
    export DATE_LONG="$(date -d "$DATE" +"%b %d, %Y")"

    p:append_to_listing
  fi

  p:write "$TYPE.html"
}

p:write() {
  # Writes a page to the $SRC directory.

  local dist="$SRC$URL.html"
  [ -f "$dist" ] && err "'$dist' already exists."

  mkdir -p "$(dirname "$dist")"
  export CONTENT="$(p:render "$1")" # Render sub-template
  p:render "base.html" > "$dist" # Render into base template
  $FORMAT --write "$dist" >/dev/null
}

p:render() {
  # Renders a template in the $TEMPLATES directory.
  cat "$TEMPLATES/$1" | envsubst
}

p:append_to_listing() {
  # Appends item to listing on /blog

  local C="$(p:render "h-entry.html" | p:sed_escape)"
  sed -i /'<!-- INSERT NEW POSTS HERE -->'/a\\"$C" "$SRC/blog/index.html"
}

p:get() {
  export $2=""
  printf "$1: "
  read $2
  export $2

  if [ -z "${!2}" ]; then
    err "you didn't provide $1."
  fi
}

p:get_with_default() {
  export $2=""
  printf "$1 [$3]: "
  read $2
  export $2

  if [ "${!2}" = "" ]; then
    eval "export $2='$3'"
  fi
}

p:sed_escape() {
  sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//;s/\//\\\//g' | tr '\n' ' ' 
}
