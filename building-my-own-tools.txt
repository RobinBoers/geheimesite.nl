---
title: Building my own things
date: 2023-11-17
language: en
---

TL;DR I've been thinking lately about how I use my computer, and how I can improve my workflow -- by building my own stuff.

I wrote about [Wesley's amazing website](https://wesleyac.com) multiple times in the past. While his writing is amazing, what I like most about his site is the way he built it. He basically wrote a static site generator, with exactly the things he needed, in plain Bash. That's cool!

And then a while back while reading some blogs, I stumbled upon [Linus' blog](https://thesephist.com/posts/). In addition to his blog (which is also very interesting btw), he has also written a whole suit of tools that he uses himself. That's *even cooler*! 

It was really inspiring to me -- I want that. I want to build my own tools. So I made a plan.

## The Plan

I want my tools to run in two places: 

- On the Unix commandline.
- As lightweight pages on the Web.

I've found the perfect tools for the job:

- [The `rc` shell written by Drew DeVault.](https://drewdevault.com/2023/04/18/2023-04-18-A-new-shell-for-Unix.html)
- [The Oak programming language.](https://oaklang.org)

Here's some things I want to make:

- netcat: A tool that prints the content of a remote resource, similar to `cat` on your fs. It should cache the response in `~/.cache`. If the resource is requested again, it checks whether the last modified date of the cached version is within the last X (let's say 30) days. If the file has "expired" and there is an internet connection available, ask the server for a new version (with the `Last-Modified` or `ETag` headers).

- open: An application opener. Looks at the URL scheme or mime type of the input and checks which application to launch. Falls back to `xdg-open` if the mime type hasn't been configured.

And I want to replace [Bix](https://git.dupunkto.org/~robin/libre0b11/bix) with separate tools:

- bix: A tool that basically wraps language-specific tools like `npm`, `cargo`, `mix`. It detects what language you're using, and the delegates to the corresponding tool. This means one CLI interface that works in every project.

- yo: a simple project manager. It should contain useful scripts for performing commands related to project setup, like creating repositories, pulling ignore files, generating files. Basically most of what bix currently does.

- A [Bakefile](https://github.com/kennethreitz/bake), which is an improved Makefile.

I'm also planning to write a bunch of Markdown converters:

- md2html: A simple markdown to HTML converter.
- md2gemtext: A simple markdown to gemtext converter.
- md2goph: A simple markdown to gophermap converter.

Together, this should be enough for some bigger projects:

- A rewrite of my personal blog, Wesley-style.
- A RSS reader as SSG, as described in [my previous blogpost](/plans-for-my-rss-reader)
- A simple pastebin style app with CLI interface:

```shell
$ cat hello.txt | paste | echo
https://geheimesite.nl/paste/xxx
```

- [My own search engine maybe?](/search-engine)

/dream

